buildscript {
  ext.versions = [
      'android': '4.1.1.4',
      'autovalue': '1.6.2',
      'coroutines': '1.1.1',
      'errorprone': '2.0.21',
      'grpc': '1.14.0',
      'gson': '2.8.1',
      'guava': '20.0',
      'javapoet': '1.10.0',
      'kotlinpoet': '1.1.0',
      'jsr305': '3.0.2',
      'kotlin': '1.3.20',
      'okio': '2.2.2',
      'okhttp': '3.13.1',
      'moshi': '1.6.0',
      'protobuf': '0.8.8',
      'protoc': '3.0.0',
      'junit': '4.12',
      'assertj': '3.11.0',
      'jimfs': '1.0',
      'animalSniffer': '1.16',
      'animalSnifferGradle': '1.4.6',
      'maven': '3.5.0',
      'mavenAnnotations': '3.5',
      'mavenPluginBuilder': '1.2.1',
      'mavenPublish': '0.6.0'
  ]

  ext.deps = [
      plugins: [
          android: 'com.android.tools.build:gradle:3.2.0',
          kotlin: "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
          shadow: 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
      ],
      'android': "com.google.android:android:${versions.android}",
      'guava': "com.google.guava:guava:${versions.guava}",
      'okio': "com.squareup.okio:okio:${versions.okio}",
      'jsr305': "com.google.code.findbugs:jsr305:${versions.jsr305}",
      'grpc': [
          "genJava": "io.grpc:protoc-gen-grpc-java:${versions.grpc}",
          "netty": "io.grpc:grpc-netty:${versions.grpc}",
          "protobuf": "io.grpc:grpc-protobuf:${versions.grpc}",
          "stub": "io.grpc:grpc-stub:${versions.grpc}",
      ],
      'gson': "com.google.code.gson:gson:${versions.gson}",
      'javapoet': "com.squareup:javapoet:${versions.javapoet}",
      'kotlinpoet': "com.squareup:kotlinpoet:${versions.kotlinpoet}",
      'autovalue': [
          'compiler': "com.google.auto.value:auto-value:${versions.autovalue}",
          'annotations': "com.google.auto.value:auto-value-annotations:${versions.autovalue}"
      ],
      'okhttp': "com.squareup.okhttp3:okhttp:${versions.okhttp}",
      'kotlin': [
          'stdlib': [
              'jdk6': "org.jetbrains.kotlin:kotlin-stdlib",
              'jdk8': "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
          ],
          'test': [
              'junit': "org.jetbrains.kotlin:kotlin-test-junit",
          ],
          'coroutines': [
              'core': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
          ]
      ],
      'moshi': "com.squareup.moshi:moshi:${versions.moshi}",
      'junit': "junit:junit:${versions.junit}",
      'assertj': "org.assertj:assertj-core:${versions.assertj}",
      'jimfs': "com.google.jimfs:jimfs:${versions.jimfs}",
      'animalSniffer': [
          'gradle': "ru.vyarus:gradle-animalsniffer-plugin:${versions.animalSnifferGradle}",
          'annotations': "org.codehaus.mojo:animal-sniffer-annotations:${versions.animalSniffer}",
      ],
      'maven': [
          'core': "org.apache.maven:maven-core:${versions.maven}",
          'plugin': [
              'api': "org.apache.maven:maven-plugin-api:${versions.maven}",
              'annotations': "org.apache.maven.plugin-tools:maven-plugin-annotations:${versions.mavenAnnotations}",
              'builder': "gradle.plugin.com.liferay:gradle-plugins-maven-plugin-builder:${versions.mavenPluginBuilder}",
              'publish': "com.vanniktech:gradle-maven-publish-plugin:${versions.mavenPublish}",
          ]
      ],
      'protoc': "com.google.protobuf:protoc:${versions.protoc}",
      'protobufGradlePlugin': "com.google.protobuf:protobuf-gradle-plugin:${versions.protobuf}"
  ]

  dependencies {
    classpath deps.plugins.kotlin
    classpath deps.plugins.shadow
    classpath deps.animalSniffer.gradle
    classpath deps.maven.plugin.builder
    classpath deps.maven.plugin.publish
  }

  repositories {
    mavenCentral()
    gradlePluginPortal()
  }
}

allprojects {
  group = GROUP
  version = VERSION_NAME

  repositories {
    google()
    mavenCentral()
  }
}

subprojects { project ->
  // The `application` plugin internally applies the `distribution` plugin and
  // automatically adds tasks to create/publish tar and zip artifacts.
  // https://docs.gradle.org/current/userguide/application_plugin.html
  // https://docs.gradle.org/current/userguide/distribution_plugin.html#sec:publishing_distributions_upload
  plugins.withType(DistributionPlugin) {
    distTar.enabled = false
    distZip.enabled = false
    configurations.archives.artifacts.removeAll { it.file =~ 'tar' || it.file =~ 'zip' }
  }

  apply plugin: 'com.vanniktech.maven.publish'
  apply plugin: 'checkstyle'

  afterEvaluate {
    checkstyle {
      toolVersion '7.7'
      sourceSets = [project.sourceSets.main]
    }
  }
}

apply from: 'gen-tests.gradle'

tasks {
  def runtime = tasks.register("installRuntimeToMavenLocal", GradleBuild.class) {
    dir = file("wire-runtime")
    tasks = ["installArchives"]
  }

  def schema = tasks.register("installSchemaToMavenLocal", GradleBuild.class) {
    dir = file("wire-schema")
    tasks = ["installArchives"]
  }

  def javagen = tasks.register("installJavaGeneratorToMavenLocal", GradleBuild.class) {
    dir = file("wire-java-generator")
    tasks = ["installArchives"]
  }

  def kotlingen = tasks.register("installKotlinGeneratorToMavenLocal", GradleBuild.class) {
    dir = file("wire-kotlin-generator")
    tasks = ["installArchives"]
  }

  def compiler = tasks.register("installCompilerToMavenLocal", GradleBuild.class) {
    dir = file("wire-compiler")
    tasks = ["installArchives"]
    dependsOn(runtime, schema, javagen, kotlingen)
  }

  def plugin = tasks.register("installPluginToMavenLocal", GradleBuild.class) {
    dir = file("wire-gradle-plugin")
    tasks = ["installArchives"]
    dependsOn(compiler)
  }

  def grpcRuntime = tasks.register("installGrpcRuntimeToMavenLocal", GradleBuild.class) {
    dir = file("wire-grpc-client")
    tasks = ["installArchives"]
    dependsOn(plugin)
  }

  tasks.register("assembleSample", GradleBuild.class) {
    dir = file("sample")
    tasks = ["build", "run"]
    dependsOn(grpcRuntime)
  }

  tasks.register("assembleAndroidSample", GradleBuild.class) {
    dir = file("sample-android")
    tasks = ["assembleDebug"]
    dependsOn(plugin)
  }
}

tasks.wrapper {
  distributionType = Wrapper.DistributionType.ALL
}